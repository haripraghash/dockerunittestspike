# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  imageName: '$(dockerId).azurecr.io/dockerunittestspike:$(build.buildId)'
  buildConfiguration: 'Release'


steps:
- task: CopyFiles@2
  displayName: Copy provisioning scripts
  inputs:
    SourceFolder: dockerunittestspike.provisioning
    TargetFolder: '$(build.artifactstagingdirectory)/iac'

- task: PublishBuildArtifacts@1
  displayName: Publish infrastructure artifacts
  inputs:
    PathtoPublish: '$(build.artifactstagingdirectory)/iac'
    ArtifactName: iac

- script: |
    docker build -t $(imageName) -f Dockerfile .
  displayName: Build docker image
  continueOnError: false

- script: |
    export unittestslayerid=$(docker images --filter "label=unittestlayer=true" -q)
    env
    docker create --name unittestcontainer $unittestslayerid
    docker cp unittestcontainer:/out/testresults ./testresults
    docker stop unittestcontainer
    docker rm unittestcontainer
  displayName: Run unit tests
  continueOnError: false

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/dockerunittestspiketestresults.xml'
    searchFolder: '$(System.DefaultWorkingDirectory)/testresults'
    publishRunAttachments: true
    failTaskOnFailedTests: true

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/testresults/coverage/coverage.cobertura.xml'
    reportDirectory: '$(System.DefaultWorkingDirectory)/testresults/coverage/reports'
  displayName: 'Publish coverage reports'

- script: |
    docker login -u $(dockerId) -p $pswd $(dockerid).azurecr.io
    docker push $(imageName) 
  displayName: Push Image to $(dockerid).azurecr.io
  continueOnError: false
  env:
    pswd: $(dockerPassword)